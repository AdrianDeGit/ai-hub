---
alwaysApply: false
---


# Programming Standards and Clean Code Guidelines

## Communication Standards

- All responses and thinking must be in Simplified Chinese.
- All code generation, comments, and explanations must be in Simplified Chinese.
- If the user doesn't explicitly ask for implementation, writing, or completion, do not start coding directly.
- User requirements take precedence over everything else. If the user needs you to follow certain requirements, prioritize following the user's requirements.

## I. Basic Standards

- Strictly follow the "Alibaba Java Development Manual (Songshan Edition)" standards, prioritizing [Mandatory] > [Recommended] > [Reference].
- Code must compile without syntax errors and comply with Java language specifications.
- Prioritize using Lambda expressions to simplify code, especially for collection operations, anonymous inner classes, and similar scenarios.
- When coding, try not to modify existing code unnecessarily, adhering to design principles and design patterns such as the Open-Closed Principle.

## II. Naming Conventions

- [Mandatory] Class names use UpperCamelCase style (except for special classes like DO/BO/DTO/VO), such as `UserService`, with names indicating the core responsibility of the class.
- [Mandatory] Method names, parameter names, member variables, and local variables use lowerCamelCase style, such as `calculateOrderPrice()`, with names explaining purpose rather than implementation details.
- [Mandatory] Constants are named in all uppercase with underscores separating words, with complete and clear semantics, such as `MAX_ORDER_AMOUNT` (prohibiting abbreviations like `MAX_AMOUNT`).
- [Mandatory] Avoid using pinyin, pinyin-English mixed naming, and eliminate non-standard abbreviations (such as `AbsClass` instead of `AbstractClass`), except for recognized abbreviations (such as `DAO`, `RPC`).
- [Recommended] If interface names represent capabilities, use adjective suffixes (such as `-able`); Service/DAO implementation classes use `Impl` suffix, such as `OrderServiceImpl`.

## III. Constants and Variables

- [Mandatory] Prohibit using magic numbers (undefined hardcoded values), must be defined as named constants, such as using `public static final int RETRY_COUNT = 3` instead of directly writing `3`.
- [Recommended] Maintain constants grouped by functionality, placed at the top of classes or in dedicated constant files (such as `CacheConsts`, `SystemConsts`).
- [Mandatory] Basic data types must be initialized to avoid null pointer exceptions; specify initial capacity when initializing collections, such as `new ArrayList<>(10)`.
- [Mandatory] When assigning `long`/`Long` values, must add uppercase `L` after the number (to avoid confusion between lowercase `l` and digit `1`), such as `Long total = 1000L`.

## IV. Code Structure

- [Recommended] Each method should do only one thing, with code lines not exceeding 80 lines (excluding comments), and complex logic should be split into sub-methods.

- [Mandatory] Unified code formatting: 4-space indentation (prohibiting Tab); space before left brace and no line break, line break after left brace; line break before right brace.

- [Recommended] Method order within classes: public/protected methods > private methods > getter/setter methods; separate related logic code blocks with blank lines.

- [Recommended] Avoid multi-level nested conditional judgments, optimize using guard statements, strategy patterns, or Lambda expressions, such as:

  ```java
  if (param == null) { return; }
  if (status != SUCCESS) { log.error("Status exception"); return; }
  ```

## V. Comment Standards

- [Mandatory] Classes, interfaces, and enums must have Javadoc comments, including author (`@author`), date (`@date yyyy/MM/dd`), and functional description.
- [Mandatory] Method comments must explain functionality, parameter meanings, return values, and exception situations, focusing on explaining "why implemented this way" rather than "what was done".
- [Recommended] Complex business logic and algorithm implementations must have inline comments; enum fields need comments explaining the purpose of each value.
- [Reference] Avoid redundant comments (such as commenting obvious code); special markers must indicate person and time: `TODO` (to be implemented), `FIXME` (error to be fixed).

## VI. Functions and Encapsulation

- [Recommended] Each function is responsible for single logic; if comments are needed to explain function functionality, it indicates the function should be split.
- [Mandatory] Strict access control for class members and methods: use `private` for private methods/variables, use `protected` for subclass-only visibility, avoid over-exposure.
- [Recommended] Hide implementation details, expose clear interfaces: set utility class constructors to `private`; interfaces only define method signatures, not containing specific implementations (except default methods).
- [Recommended] Move nested conditional statements to appropriately named functions, such as using `isValidUser(user)` instead of complex conditional judgment expressions.

## VII. Code Reuse and Quality

- [Mandatory] Eliminate duplicate code, extract same logic into public methods or utility classes, maintaining single source of truth.
- [Recommended] Continuous refactoring: regularly clean up redundant code, optimize complex logic, ensure code is cleaner when leaving than when found.
- [Recommended] Avoid creating objects or performing complex calculations in loops, reducing performance overhead; prioritize using `StringBuilder` for string concatenation.
- [Mandatory] Use `equals()` instead of `==` for wrapper class object comparisons; specify error ranges for floating-point comparisons or use `BigDecimal`.

## VIII. Exception Handling

- [Mandatory] Caught exceptions must be handled (logging or business compensation), prohibit empty `catch` blocks; `finally` blocks must close resources (streams, connections, etc.).
- [Recommended] Custom exceptions must contain meaningful error messages for troubleshooting; avoid using `e.printStackTrace()`, should use logging frameworks.
- [Mandatory] Exceptions thrown by methods must be explained in documentation comments; avoid catching pre-checkable `RuntimeException` (such as avoiding `NullPointerException` through `if (obj != null)`).

## IX. Testing Standards

- [Mandatory] Unit tests must follow AIR principles (Automated, Independent, Repeatable), not dependent on external environments.
- [Recommended] Core business and core module incremental code must pass unit tests, with statement coverage not less than 70%, core modules must reach 100%.
- [Recommended] Tests must cover boundary conditions (such as loop boundaries, special values), error inputs (such as illegal parameters, exception flows).

## X. Version Control

- [Recommended] Write clear Git commit messages, format: `<type>: <description>` (description in Chinese, not exceeding 50 characters).
- [Recommended] Commit types: `feat` (new feature), `fix` (bug fix), `refactor` (refactoring), `style` (format adjustment).
- [Recommended] Make small, focused commits, each commit containing only single logical changes; use meaningful branch names (such as `feature/user-login`).

## XI. Collection Processing

- [Mandatory] Use `isEmpty()` to check if collections are empty, not `size() == 0`; use `toArray(T[] a)` for collection to array conversion, such as `list.toArray(new String[0])`.
- [Recommended] Prioritize using Lambda expressions and Stream API for collection processing, such as filtering: `list.stream().filter(u -> u.getAge() > 18).collect(Collectors.toList())`.
- [Mandatory] Prohibit `add/remove` operations in `foreach` loops, must use `Iterator`; when using `Collectors.toMap()`, must specify `mergeFunction` to handle duplicate keys.

Please strictly follow the above standards when writing code, ensuring compliance with requirements and clean code principles. Code should be concise, efficient, and maintainable. After completion, provide Git commit phrases that comply with the standards. Also ask users if they need unit tests or other tests (can provide testing suggestions independently).


请严格遵循以上规范编写代码，确保符合要求及整洁代码原则，代码需简洁、高效、可维护。完成后务必提供符合规范的 Git 提交短语。并且询问用户是否需要编写单元测试或者其他测试（可自行提供测试建议）。
# Programming Standards and Clean Code Guidelines

## Communication Standards

- All responses and thinking must be in Simplified Chinese.
- All code generation, comments, and explanations must be in Simplified Chinese.
- If the user doesn't explicitly ask for implementation, writing, or completion, do not start coding directly.
- User requirements take precedence over everything else. If the user needs you to follow certain requirements, prioritize following the user's requirements.

## I. Basic Standards

- Strictly follow the "Alibaba Java Development Manual (Songshan Edition)" standards, prioritizing [Mandatory] > [Recommended] > [Reference].
- Code must compile without syntax errors and comply with Java language specifications.
- Prioritize using Lambda expressions to simplify code, especially for collection operations, anonymous inner classes, and similar scenarios.
- When coding, try not to modify existing code unnecessarily, adhering to design principles and design patterns such as the Open-Closed Principle.

## II. Naming Conventions

- [Mandatory] Class names use UpperCamelCase style (except for special classes like DO/BO/DTO/VO), such as `UserService`, with names indicating the core responsibility of the class.
- [Mandatory] Method names, parameter names, member variables, and local variables use lowerCamelCase style, such as `calculateOrderPrice()`, with names explaining purpose rather than implementation details.
- [Mandatory] Constants are named in all uppercase with underscores separating words, with complete and clear semantics, such as `MAX_ORDER_AMOUNT` (prohibiting abbreviations like `MAX_AMOUNT`).
- [Mandatory] Avoid using pinyin, pinyin-English mixed naming, and eliminate non-standard abbreviations (such as `AbsClass` instead of `AbstractClass`), except for recognized abbreviations (such as `DAO`, `RPC`).
- [Recommended] If interface names represent capabilities, use adjective suffixes (such as `-able`); Service/DAO implementation classes use `Impl` suffix, such as `OrderServiceImpl`.

## III. Constants and Variables

- [Mandatory] Prohibit using magic numbers (undefined hardcoded values), must be defined as named constants, such as using `public static final int RETRY_COUNT = 3` instead of directly writing `3`.
- [Recommended] Maintain constants grouped by functionality, placed at the top of classes or in dedicated constant files (such as `CacheConsts`, `SystemConsts`).
- [Mandatory] Basic data types must be initialized to avoid null pointer exceptions; specify initial capacity when initializing collections, such as `new ArrayList<>(10)`.
- [Mandatory] When assigning `long`/`Long` values, must add uppercase `L` after the number (to avoid confusion between lowercase `l` and digit `1`), such as `Long total = 1000L`.

## IV. Code Structure

- [Recommended] Each method should do only one thing, with code lines not exceeding 80 lines (excluding comments), and complex logic should be split into sub-methods.

- [Mandatory] Unified code formatting: 4-space indentation (prohibiting Tab); space before left brace and no line break, line break after left brace; line break before right brace.

- [Recommended] Method order within classes: public/protected methods > private methods > getter/setter methods; separate related logic code blocks with blank lines.

- [Recommended] Avoid multi-level nested conditional judgments, optimize using guard statements, strategy patterns, or Lambda expressions, such as:

  ```java
  if (param == null) { return; }
  if (status != SUCCESS) { log.error("Status exception"); return; }
  ```

## V. Comment Standards

- [Mandatory] Classes, interfaces, and enums must have Javadoc comments, including author (`@author`), date (`@date yyyy/MM/dd`), and functional description.
- [Mandatory] Method comments must explain functionality, parameter meanings, return values, and exception situations, focusing on explaining "why implemented this way" rather than "what was done".
- [Recommended] Complex business logic and algorithm implementations must have inline comments; enum fields need comments explaining the purpose of each value.
- [Reference] Avoid redundant comments (such as commenting obvious code); special markers must indicate person and time: `TODO` (to be implemented), `FIXME` (error to be fixed).

## VI. Functions and Encapsulation

- [Recommended] Each function is responsible for single logic; if comments are needed to explain function functionality, it indicates the function should be split.
- [Mandatory] Strict access control for class members and methods: use `private` for private methods/variables, use `protected` for subclass-only visibility, avoid over-exposure.
- [Recommended] Hide implementation details, expose clear interfaces: set utility class constructors to `private`; interfaces only define method signatures, not containing specific implementations (except default methods).
- [Recommended] Move nested conditional statements to appropriately named functions, such as using `isValidUser(user)` instead of complex conditional judgment expressions.

## VII. Code Reuse and Quality

- [Mandatory] Eliminate duplicate code, extract same logic into public methods or utility classes, maintaining single source of truth.
- [Recommended] Continuous refactoring: regularly clean up redundant code, optimize complex logic, ensure code is cleaner when leaving than when found.
- [Recommended] Avoid creating objects or performing complex calculations in loops, reducing performance overhead; prioritize using `StringBuilder` for string concatenation.
- [Mandatory] Use `equals()` instead of `==` for wrapper class object comparisons; specify error ranges for floating-point comparisons or use `BigDecimal`.

## VIII. Exception Handling

- [Mandatory] Caught exceptions must be handled (logging or business compensation), prohibit empty `catch` blocks; `finally` blocks must close resources (streams, connections, etc.).
- [Recommended] Custom exceptions must contain meaningful error messages for troubleshooting; avoid using `e.printStackTrace()`, should use logging frameworks.
- [Mandatory] Exceptions thrown by methods must be explained in documentation comments; avoid catching pre-checkable `RuntimeException` (such as avoiding `NullPointerException` through `if (obj != null)`).

## IX. Testing Standards

- [Mandatory] Unit tests must follow AIR principles (Automated, Independent, Repeatable), not dependent on external environments.
- [Recommended] Core business and core module incremental code must pass unit tests, with statement coverage not less than 70%, core modules must reach 100%.
- [Recommended] Tests must cover boundary conditions (such as loop boundaries, special values), error inputs (such as illegal parameters, exception flows).

## X. Version Control

- [Recommended] Write clear Git commit messages, format: `<type>: <description>` (description in Chinese, not exceeding 50 characters).
- [Recommended] Commit types: `feat` (new feature), `fix` (bug fix), `refactor` (refactoring), `style` (format adjustment).
- [Recommended] Make small, focused commits, each commit containing only single logical changes; use meaningful branch names (such as `feature/user-login`).

## XI. Collection Processing

- [Mandatory] Use `isEmpty()` to check if collections are empty, not `size() == 0`; use `toArray(T[] a)` for collection to array conversion, such as `list.toArray(new String[0])`.
- [Recommended] Prioritize using Lambda expressions and Stream API for collection processing, such as filtering: `list.stream().filter(u -> u.getAge() > 18).collect(Collectors.toList())`.
- [Mandatory] Prohibit `add/remove` operations in `foreach` loops, must use `Iterator`; when using `Collectors.toMap()`, must specify `mergeFunction` to handle duplicate keys.

Please strictly follow the above standards when writing code, ensuring compliance with requirements and clean code principles. Code should be concise, efficient, and maintainable. After completion, provide Git commit phrases that comply with the standards. Also ask users if they need unit tests or other tests (can provide testing suggestions independently).


请严格遵循以上规范编写代码，确保符合要求及整洁代码原则，代码需简洁、高效、可维护。完成后务必提供符合规范的 Git 提交短语。并且询问用户是否需要编写单元测试或者其他测试（可自行提供测试建议）。